import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { API_URL } from "../config";
import { selectToken } from "../slices/auth.slice";

// Define a service using a base URL and expected endpoints
export const orderAPI = createApi({
  reducerPath: "orderManagement",
  tagTypes: ["OrderList"],
  baseQuery: fetchBaseQuery({
    baseUrl: API_URL,
    prepareHeaders: (headers, { getState }) => {
      const token = selectToken(getState()); // Retrieve token from Redux state using selectToken selector
      if (token) {
        headers.append("Authorization", `Bearer ${token}`);
      }
      headers.append("Content-Type", "application/json");
      return headers;
    },
  }),
  endpoints: (builder) => ({
    getAllOrders: builder.query({
      query: () => `orders/getAll`,

      providesTags: (result, _error, _arg) =>
        result
          ? [
              ...result.map(({ id }) => ({ type: "orderManagement", id })),
              { type: "OrderList", id: "LIST" },
            ]
          : [{ type: "OrderList", id: "LIST" }],
    }),

    getOrderDetail: builder.query({
      query: (id) => `orders/orderDetail/${id}`,
    }),
    addOrder: builder.mutation({
      query: (body) => {
        return {
          method: "POST",
          url: `orders/create`,
          body,
        };
      },
      invalidatesTags: [{ type: "OrderList", id: "LIST" }],
    }),
    addCustomer: builder.mutation({
      query: (body) => {
        return {
          method: "POST",
          url: `customers/add`,
          body,
        };
      },
      invalidatesTags: [{ type: "OrderList", id: "LIST" }],
    }),
  }),
});

// Export hooks for usage in functional components, which are
// auto-generated based on the defined endpoints
// Hooks are auto-generated by RTK-Query
export const {
  useGetAllOrdersQuery,
  useGetOrderDetailQuery,
  useAddOrderMutation,
  useAddCustomerMutation,
} = orderAPI;
