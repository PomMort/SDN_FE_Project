import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { PRODUCT_API } from "../config";
import { selectToken } from "../slices/auth.slice";

export const productAPI = createApi({
  reducerPath: "productManagement",
  tagTypes: ["ProductList"],
  baseQuery: fetchBaseQuery({
    baseUrl: PRODUCT_API,
    prepareHeaders: (headers, { getState }) => {
      const token = selectToken(getState()); // Retrieve token from Redux state using selectToken selector
      if (token) {
        headers.append("Authorization", `Bearer ${token}`);
      }
      headers.append("Content-Type", "application/json");
      return headers;
    },
  }),
  endpoints: (builder) => ({
    getProducts: builder.query({
      query: () => `api/v1/products`,
      providesTags: (result, _error, _arg) =>
        result
          ? [
              ...result.map(({ id }) => ({ type: "productManagement", id })),
              { type: "ProductList", id: "LIST" },
            ]
          : [{ type: "ProductList", id: "LIST" }],
    }),
    getProductsById: builder.query({
      query: (id) => `api/v1/products/${id}`,
      providesTags: (result, error, id) => [{ type: "ProductList", id }],
    }),

    addProduct: builder.mutation({
      query: (body) => {
        return {
          method: "POST",
          url: `api/v1/products`,
          body,
        };
      },
      invalidatesTags: [{ type: "ProductList", id: "LIST" }],
    }),
    editProduct: builder.mutation({
      query: (payload) => {
        console.log(payload);
        return {
          method: "PUT",
          url: `api/v1/products/` + payload.id,
          body: payload,
        };
      },
      invalidatesTags: (res, err, arg) => [{ type: "ProductList", id: arg.id }],
    }),
    deleteProduct: builder.mutation({
      query: (payload) => {
        return {
          method: "DELETE",
          url: `api/v1/products/` + payload,
        };
      },
      invalidatesTags: (_res, _err, _arg) => [
        { type: "ProductList", id: "LIST" },
      ],
    }),
  }),
});

// Export hooks for usage in functional components, which are
// auto-generated based on the defined endpoints
// Hooks are auto-generated by RTK-Query
export const {
  useGetProductsQuery,
  useGetProductsByIdQuery,
  useAddProductMutation,
  useEditProductMutation,
  useDeleteProductMutation,
} = productAPI;
