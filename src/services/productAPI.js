import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { PRODUCT_API } from "../config";

// Define a service using a base URL and expected endpoints
export const productAPI = createApi({
  reducerPath: "flowerManagement",
  // Tag types are used for caching and invalidation.
  tagTypes: ["ProductList"],
  baseQuery: fetchBaseQuery({ baseUrl: PRODUCT_API }),
  endpoints: (builder) => ({
    // Supply generics for the return type (in this case `productAPIResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getProduct: builder.query({
      query: () => `products`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, _error, _arg) =>
        result
          ? [
              ...result.map(({ id }) => ({ type: "flowerManagement", id })),
              { type: "ProductList", id: "LIST" },
            ]
          : [{ type: "ProductList", id: "LIST" }],
    }),
    // addFlower: builder.mutation({
    //   query: (body) => {
    //     return {
    //       method: "POST",
    //       url: `product`,
    //       body,
    //     };
    //   },
    //   invalidatesTags: [{ type: "ProductList", id: "LIST" }],
    // }),
    // editFlower: builder.mutation({
    //   query: (payload) => {
    //     return {
    //       method: "PUT",
    //       url: `product/` + payload.id,
    //       body: payload.body,
    //     };
    //   },
    //   invalidatesTags: (res, err, arg) => [{ type: "ProductList", id: arg.id }],
    // }),
    // deleteFlower: builder.mutation({
    //   query: (payload) => {
    //     return {
    //       method: "DELETE",
    //       url: `product/` + payload.id,
    //     };
    //   },
    //   invalidatesTags: (_res, _err, _arg) => [
    //     { type: "ProductList", id: "LIST" },
    //   ],
    // }),
  }),
});

// Export hooks for usage in functional components, which are
// auto-generated based on the defined endpoints
// Hooks are auto-generated by RTK-Query
export const {
  useGetProductQuery,
  // useAddFlowerMutation,
  // useEditFlowerMutation,
  // useDeleteFlowerMutation,
} = productAPI;
